#![allow(dead_code)]
pub mod error_codes;
pub mod types;
pub use error_codes::*;
pub use types::*;

#[cfg(test)]
mod tests;

// Autogenerated Bindings
#[allow(non_upper_case_globals)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(dead_code)]
#[link(name = "lepton")]
pub mod bindings {
    include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

#[derive(Debug, Clone, Copy)]
#[repr(u32)]
pub enum PortTag {
    CciTwi = bindings::LEP_CAMERA_PORT_E_TAG_LEP_CCI_TWI, 
    CciSpi = bindings::LEP_CAMERA_PORT_E_TAG_LEP_CCI_SPI, 
    End    = bindings::LEP_CAMERA_PORT_E_TAG_LEP_END_CCI_PORTS, 
}

impl std::convert::From<u32> for PortTag {
    fn from(tag: u32) -> Self {
        match tag {
            bindings::LEP_CAMERA_PORT_E_TAG_LEP_CCI_TWI => PortTag::CciTwi,
            bindings::LEP_CAMERA_PORT_E_TAG_LEP_CCI_SPI => PortTag::CciSpi,
            _ => panic!("Invalid Port Tag!"),
        }
    }
}

#[derive(Debug, Clone, Copy)]
#[repr(C)]
pub struct CameraPortDescriptor {
    port_id:   u16,
    port_type: PortTag,
    baud_rate: u16,
    dev_addr:  u8,
}

impl CameraPortDescriptor {

    /// `open` is preferred
    pub fn default() -> Self {
        CameraPortDescriptor {
            port_id:   1,
            port_type: PortTag::CciTwi,
            baud_rate: 400,
            dev_addr:  0x2A,
        }
    }

    /// 1 for /dev/i2c-1
    pub fn open(port_id: u16) -> (Self, LeptonResult) {
        use bindings::*;

        let mut port: LEP_CAMERA_PORT_DESC_T_TAG = unsafe { std::mem::zeroed() };
        let port_type = PortTag::CciTwi;
        let baud_rate = 400; // kHz
        let result: LeptonResult;
        unsafe {
            result = LEP_OpenPort(port_id,
                                  port_type as u32,
                                  baud_rate,
                                  &mut port).into();
        }
        (port.into(), result)
    }

    pub fn enable_radiometry(&mut self) -> LeptonResult {
        use bindings::*;

        unsafe {
            return LEP_SetRadEnableState(self as *mut LEP_CAMERA_PORT_DESC_T_TAG, 
                                         EnableState::Enabled as u32).into();
        }
    }
}

impl std::convert::From<bindings::LEP_CAMERA_PORT_DESC_T_TAG> for CameraPortDescriptor {
    fn from(desc: bindings::LEP_CAMERA_PORT_DESC_T_TAG) -> Self {
        CameraPortDescriptor {
            port_id:   desc.portID,
            port_type: desc.portType.into(),
            baud_rate: desc.portBaudRate,
            dev_addr:  desc.deviceAddress,
        }
    }
}

