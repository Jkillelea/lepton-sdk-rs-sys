#![allow(dead_code)]

use std::sync::Arc;
use std::convert::From;

#[macro_use]
extern crate lazy_static;

pub mod error_codes;
pub use error_codes::*;
pub mod types;
pub use types::*;

#[cfg(test)]
mod tests;

// Autogenerated Bindings
#[allow(non_upper_case_globals)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(dead_code)]
#[link(name = "lepton")]
pub mod bindings {
    include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

lazy_static! {
    pub static ref CAMERA0: Arc<bindings::LEP_CAMERA_PORT_DESC_T_TAG> = {
        Arc::new(bindings::LEP_CAMERA_PORT_DESC_T_TAG {
                portID: 0,
                portType: PortTag::CciTwi as u32,
                portBaudRate: 400, // kHz
                deviceAddress: 0x2A,
        })
    };
    pub static ref CAMERA1: Arc<bindings::LEP_CAMERA_PORT_DESC_T_TAG> = {
        Arc::new(bindings::LEP_CAMERA_PORT_DESC_T_TAG {
                portID: 1,
                portType: PortTag::CciTwi as u32,
                portBaudRate: 400, // kHz
                deviceAddress: 0x2A,
        })
    };
}


/// An opaque, reference counted version of `LEP_CAMERA_PORT_DESC_T_TAG`
#[repr(C)]
#[derive(Debug, Clone)]
pub struct CameraPortDescriptor {
    inner: Arc<bindings::LEP_CAMERA_PORT_DESC_T_TAG>
}

impl From<bindings::LEP_CAMERA_PORT_DESC_T_TAG> for CameraPortDescriptor {
    fn from(desc: bindings::LEP_CAMERA_PORT_DESC_T_TAG) -> Self {
        CameraPortDescriptor {
            inner: Arc::new(desc.clone()),
        }
    }
}

impl CameraPortDescriptor {

    /// 1 for `/dev/i2c-1`, 0 for `/dev/i2c-0`
    pub fn new(port_id: u16) -> Self {
        CameraPortDescriptor {
            inner: match port_id {
                   0 => Arc::clone(&CAMERA0),
                   1 => Arc::clone(&CAMERA1),
                   _ => panic!("Only valid ports are 0 and 1"),
            }
        }
    }

    pub fn open(&mut self) -> LeptonResult {
        use bindings::*;

        unsafe {
            LEP_OpenPort(self.inner.portID,
                         self.inner.portType,
                         self.inner.portBaudRate,
                         Arc::get_mut(&mut self.inner).unwrap()
                      ).into()
        }

    }

    // pub fn enable_radiometry(&mut self) -> LeptonResult {
    //     use bindings::*;
    //     // these copies are baadd mkay
    //     let mut port: LEP_CAMERA_PORT_DESC_T_TAG = self.into();

    //     unsafe {
    //         return LEP_SetRadEnableState(&mut port, EnableState::Enabled as u32).into();
    //     }
    // }
}


